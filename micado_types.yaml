tosca_definitions_version: tosca_simple_yaml_1_0

interface_types:
  ##
  ## Virtualmachine-level interface type definitions
  ##
  tosca.interfaces.MiCADO.Occopus:
    derived_from: tosca.interfaces.node.lifecycle.Standard
    description: Interface for VM management with Occopus
    inputs:
      endpoint_cloud:
        type: string
        description: Cloud API endpoint
        required: false
      interface_cloud:
        type: string
        description: Cloud provider
        required: false
        constraints:
          - valid_values: [ 'ec2', 'nova', 'cloudsigma', 'cloudbroker' ]
    create:
      description: Create a compute node with Occopus

  tosca.interfaces.MiCADO.Terraform:
    derived_from: tosca.interfaces.node.lifecycle.Standard
    description: Interface for VM management with Terraform
    inputs:
      provider:
        type: string
        description: Cloud provider
        required: false
    create:
      description: Create a compute node with Terraform

  ##
  ## Container-level interface type definitions
  ##
  tosca.interfaces.MiCADO.Swarm:
    derived_from: tosca.interfaces.node.lifecycle.Standard
    description: Interface for container orchestration with Docker Swarm
    inputs:
      command:
        type: string
        description: arguments to be passed to the entrypoint
        required: false
      deploy:
        type: deploy_type
        description: swarm-specific configuration settings
        required: false
      entrypoint:
        type: string
        desciption: override the default "command"/entrypoint of container
        required: false
      environment:
        type: map
        description: map of all the environment variables required
        required: false
        entry_schema:
          type: string
      expose:
        type: list
        description: ports to expose internally
        required: false
      stop_grace_period:
        type: string
        description: time to wait to stop a container
        required: false
      labels:
        type: map
        description: labels
        required: false
        entry_schema:
          type: string
      logging:
        required: false
        type: map
      networks:
        required: false
        type: list
      volumes:
        required: false
        type: list
      secrets:
        type: list
        required: false
      tty:
        type: boolean
        required: false
    create:
      description: Orchestrate with Swarm

  tosca.interfaces.MiCADO.Kubernetes:
    derived_from: tosca.interfaces.node.lifecycle.Standard
    description: Interface for container orchestration with Kubernetes
    create:
      description: Create the workload with Kubernetes
    configure:
      description: Configure the workload spec/template with Kubernetes

  tosca.interfaces.relationship.MiCADO.Kubernetes.Configure:
    derived_from: tosca.interfaces.relationship.Configure
    description: Interface for relationship configurations with Kubernetes
    attach:
      description: Attach a volume with Kubernetes

node_types:
  ##
  ## Virtualmachine-level node type definitions
  ##
  tosca.nodes.MiCADO.Compute:
    derived_from: tosca.nodes.Compute
    description: Base compute node for MiCADO
    properties:
      context:
        type: context_type
        required: false
    capabilities:
      host:
        type: tosca.capabilities.Compute
      os:
        type: tosca.capabilities.OperatingSystem

  tosca.nodes.MiCADO.CloudSigma.Compute:
    derived_from: tosca.nodes.MiCADO.Compute
    description: CloudSigma compute node
    properties:
      num_cpus:
        type: integer
        required: true
        constraints:
          - greater_or_equal: 250
          - less_or_equal: 100000
      mem_size:
        type: integer
        required: true
        constraints:
          - greater_or_equal: 268435456
          - less_or_equal: 137438953472
      libdrive_id:
        type: string
        required: true
      vnc_password:
        type: string
        required: true
      public_key_id:
        type: string
        required: true
      host_name:
        type: string
        required: false
      nics:
        type: list
        required: true
    interfaces:
      Occopus:
        type: tosca.interfaces.MiCADO.Occopus
      Terraform:
        type: tosca.interfaces.MiCADO.Terraform

  tosca.nodes.MiCADO.EC2.Compute:
    derived_from: tosca.nodes.MiCADO.Compute
    description: Amazon EC2 compute node
    properties:
      region_name:
        type: string
        required: true
      image_id:
        type: string
        required: true
      instance_type:
        type: string
        required: true
      key_name:
        type: string
        required: false
      security_group_ids:
        type: list
        required: false
      subnet_id:
        type: string
        required: false
      tags:
        type: map
        required: false
    interfaces:
      Occopus:
        type: tosca.interfaces.MiCADO.Occopus
      Terraform:
        type: tosca.interfaces.MiCADO.Terraform

  tosca.nodes.MiCADO.CloudBroker.Compute:
    derived_from: tosca.nodes.MiCADO.Compute
    description: CloudBroker compute node
    properties:
      deployment_id:
        type: string
        required: true
      instance_type_id:
        type: string
        required: true
      key_pair_id:
        type: string
        required: false
      opened_port:
        type: string
        required: false
    interfaces:
      Occopus:
        type: tosca.interfaces.MiCADO.Occopus
      Terraform:
        type: tosca.interfaces.MiCADO.Terraform

  tosca.nodes.MiCADO.Nova.Compute:
    derived_from: tosca.nodes.MiCADO.Compute
    description: Nova compute node
    properties:
      image_id:
        type: string
        required: true
      flavor_name:
        type: string
        required: true
      tenant_name:
        type: string
        required: false
      project_id:
        type: string
        required: true
      user_domain_name:
        type: string
        required: false
      network_id:
        type: string
        required: true
      server_name:
        type: string
        required: false
      key_name:
        type: string
        required: false
      security_groups:
        type: list
        required: false
      floating_ip:
        type: string
        required: false
      floating_ip_pool:
        type: string
        required: false
    interfaces:
      Occopus:
        type: tosca.interfaces.MiCADO.Occopus
      Terraform:
        type: tosca.interfaces.MiCADO.Terraform

  ##
  ## Container-level node type definitions
  ##
  tosca.nodes.MiCADO.network.Network.Swarm:
    derived_from: tosca.nodes.network.Network
    description: description of a Docker Swarm network
    properties:
      attachable:
        type: boolean
        description: is attachable
        required: false
      driver:
        type: string
        description: network driver
        required: false
      external:
        type: boolean
        required: false
      driver_opts:
        type: map
        description: network driver options (incl. mtu)
        required: false
      ip_version:
        type: integer
        required: false
        default: null
      dhcp_enabled:
        type: boolean
        required: false
        default: null

  tosca.nodes.MiCADO.Container.Volume:
    derived_from: tosca.nodes.BlockStorage
    description: description of a container volume
    properties:
      name:
        type: string
        description: name of the volume
        required: false
      labels:
        type: map
        description: map of metadata labels
        required: false
      size:
        type: string
        description: overwrite size requirement
        required: false
    capabilities:
      volume:
        type: tosca.capabilities.Attachment
    interfaces:
      Swarm:
        type: tosca.interfaces.MiCADO.Swarm
      Kubernetes:
        type: tosca.interfaces.MiCADO.Kubernetes

  tosca.nodes.MiCADO.Container.Application.Docker:
    derived_from: tosca.nodes.Container.Application.Docker
    description: description of a Docker container using Compose or k8s-manifest keys & values
    properties:
      container_name:
        description: define the container name (Compose-naming)
        type: string
        required : false
      name:
        description: define the container name (Kubernetes-naming)
        type: string
        required: false
      ports:
        description: ports to be forwarded (long-syntax Compose or Kubernetes)
        type: list
        required: false
        entry_schema:
          type: ports_type        
      expose:
        description: ports to expose to other linked services (superfluous in Kubernetes)
        type: list
        required: false
      entrypoint:
        description: command run by container (string-style Compose-naming)
        type: string
        required: false
      command:
        description: command run by container (list-style Kubernetes-naming)
        type: list
        required: false
      cmd:
        description: |
          This uses Dockerfile naming instead of the docker-compose naming 
          since "command" is already used above for the Kubernetes-style entrypoint.
          arguments to pass to entrypoint (string-style *Dockerfile*-naming)
        type: string
        required: false
      args:
        description: arguments to pass to entrypoint (list-style Kubernetes-naming)
        type: list
        required: false
      environment:
        description: environment variables to pass to the container (map-style Compose-naming)
        type: map
        required: false
      env:
        description: environment variables to pass to the container (list-style Kubernetes-naming)
        type: list
        required: false
      labels:
        description: Swarm style labels for the container in Swarm/Pod in Kubernetes
        type: map
        required: false
      resources:
        description: resource requirements for the container (Kubernetes-naming)
        type: map
        required: false
      stop_grace_period:
        description: time before container shutting-down is forcibly killed (Compose-style)
        type: string
        required: false
      privileged:
        description: run with root equivalency (Compose-style)
        type: boolean
        required: false
      securityContext:
        description: specify security options (Kubernetes-style)
        type: map
        required: false
      tty:
        description: allocate a TTY for the container (requires stdin set to true)
        type: boolean
        required: false
      stdin_open:
        description: allocate a buffer for stdin for this container (Compose-style)
        type: boolean
        required: false
      stdin:
        description: allocate a buffer for stdin for this container (Kubernetes-style)
        type: boolean
        required: false
      stdinOnce:
        description: close the stdin channel after one attach
        type: boolean
        required: false
      healthcheck:
        description: Docker-style healthcheck
        type: map
        required: false
      livenessProbe:
        description: Kubernetes-style healthcheck
        type: map
        required: false
      readinessProbe:
        description: Kubernetes-style ready-check
        type: map
        required: false
      lifecycle:
        description: Kubernetes hooks for lifecycle management
        type: map
        required: false
      imagePullPolicy:
        description: Force pull an image (N/A in Swarm)
        type: string
        required: false
        constraints:
        - valid_values:
          - 'Always'
          - 'IfNotPresent'
      terminationMessagePath:
        description: Kubernetes container path to write termination message
        type: string
        required: false
      terminationMessagePolicy:
        description: Kubernetes container termination message
        type: string
        required: false
      workingDir:
        description: Kubernetes container working directory
        type: string
        required: false
      network_mode:
        description: Swarm style option for setting hostNetwork
        type: string
        required: false
      pid:
        description: Swarm style option for setting hostPID
        type: string
        required: false
    interfaces:
      Swarm:
        type: tosca.interfaces.MiCADO.Swarm
      Kubernetes:
        type: tosca.interfaces.MiCADO.Kubernetes
    attributes:
      port:
        type: integer
    capabilities:
      service:
        type: tosca.capabilities.Container.Docker
    requirements:
      - service:
          capability: tosca.capabilities.Container.Docker
          node: tosca.nodes.MiCADO.Container.Application.Docker
          relationship: tosca.relationships.MiCADO.ConnectsTo
      - host:
          capability: tosca.capabilities.Compute
          node: tosca.nodes.MiCADO.Compute
          relationship: tosca.relationships.HostedOn
      - volume:
          capability: tosca.capabilities.Attachment
          node: tosca.nodes.MiCADO.Container.Volume
          relationship: tosca.relationships.AttachesTo

  tosca.nodes.MiCADO.network.Network.Docker:
    derived_from: tosca.nodes.network.Network
    description: description of a Docker network
    properties:
      attachable:
        type: boolean
        description: is attachable
        required: false
      driver:
        type: string
        description: network driver
        required: false
      external:
        type: boolean
        required: false
      driver_opts:
        type: map
        description: network driver options (incl. mtu)
        required: false
      ip_version:
        type: integer
        required: false
        default: null
      dhcp_enabled:
        type: boolean
        required: false
        default: null

relationship_types:

  tosca.relationships.MiCADO.ConnectsTo:
    derived_from: tosca.relationships.ConnectsTo
    properties:
      network:
        type: string
        description: Name of Docker network to connect containers over
        required: true

capability_types:

  ## Defining TOSCA compute capabilities (normative as of V1.1)
  tosca.capabilities.Compute:
    derived_from: tosca.capabilities.Container
    properties:
      name:
        type: string
        required: false
      num_cpus:
        type: integer
        required: false
        constraints:
          - greater_or_equal: 1
      cpu_frequency:
        type: scalar-unit.frequency
        required: false
        constraints:
          - greater_or_equal: 0.1 GHz
      disk_size:
        type: scalar-unit.size
        required: false
        constraints:
          - greater_or_equal: 0 MB
      mem_size:
        type: scalar-unit.size
        required: false
        constraints:
          - greater_or_equal: 0 MB


artifact_types:
  tosca.artifacts.CloudInit.Data:
    derived_from: tosca.artifacts.Root
    properties:
      raw_text:
        type: string
        required: false

  tosca.artifacts.File.Secrets.Docker:
    derived_from: tosca.artifacts.File
    properties:
      name:
        type: string
        required: false
      file:
        type: string
        required: false
      external:
        type: boolean
        required: false

data_types:

  context_type:
    properties:
      cloud_config:
        type: string
        required: false
      append:
        type: boolean
        required: false
        default: no

  deploy_type:
    properties:
      mode:
        type: string
        required: false
      replicas:
        type: integer
        required: false
      resources:
        type: resource_type
        required: false
      labels:
        type: map
        required: false
      placement:
        type: placement_type
        required: false
      restart_policy:
        type: map
        required: false
      update_config:
        type: map
        required: false

  ports_type:
    description: |
      Interchangable Compose-style or Kube-Manifest-style port definitions

      The vocabulary that TOSCA uses to describe a port inside a container and 
      a port to map to (publish) are in direct contradiction to the vocabulary
      used by Kubernetes and Swarm.

      TOSCA says...
        "ports mappings from source (Docker container) to target (host) ports to publish"
      Swarm says...
        "target: the port inside the container"
      Kubernetes says...
        "targetPort: is the port the container accepts traffic on"
      
      Here we use the orchestrator's approach.
    properties:
    # Start service port section
    # WILL generate a service in MiCADO
      name:
        desription: Name of port (Kubernetes-style)
        type: string
        required: false
      target:
        description: Port inside container (Swarm-style)
        type: integer
        required: false
      targetPort:
        description: Port inside container (Kubernetes-style)
        type: string
        required: false
      published:
        description: Visible port (Swarm-style)
        type: integer
        required: false
      port:
        description: Visible port (Kubernetes-style)
        type: integer
        required: false
      protocol:
        description: Protocol (Swarm & Kubernetes) - SCTP is Kube only 
        type: string
        required: false
        constraints:
        - valid_values:
          - 'tcp'
          - 'TCP'
          - 'udp'
          - 'UDP'
          - 'SCTP'
      mode:
        description: |
          Swarm-only but we will understand this in Kubernetes as ServiceTypes
          Kubernetes will understand host as NodePort and ingress as ClusterIP
        type: string
        required: false
        constraints:
        - valid_values:
          - 'host'
          - 'ingress'
          - 'ClusterIP'
          - 'NodePort'
          - 'LoadBalancer'
          - 'ExternalName'
      type:
        description: The Kubernetes equivalent of mode
        type: string
        required: false
        constraints:
        - valid_values:
          - 'host'
          - 'ingress'
          - 'ClusterIP'
          - 'NodePort'
          - 'LoadBalancer'
          - 'ExternalName'
      clusterIP:
        description: Kubernetes clusterIP assignment (10.0.0.1/24)
        type: string
        required: false
      nodePort:
        description: Kubernetes nodePort assignment (30000-32767)
        type: integer
        required: false
        constraints:
          - greater_or_equal: 30000
          - less_or_equal: 32767
      metadata:
        description: Kubernetes space for adding metadata (such as service name)
        type: map
        required: false
          
      # Start containerPort section - mostly informational and definitely not required
      # will NOT generate a service in MiCADO
      containerPort:
        description: Give more info on exposed ports, omitting this does not prevent the port from being exposed (internally)
        type: integer
        required: false
      hostIP:
        description: Host IP to bind external port to
        type: string
        required: false
      hostPort:
        description: port to expose on the host. If HostNetwork then must == ContainerPort
        type: integer
        required: false

  resource_type:
    properties:
      cpus:
        type: string
        required: false
      memory:
        type: string
        required: false

  placement_type:
    properties:
      constraints:
        required: false
        type: list
      preferences:
        required: false
        type: list

policy_types:

  tosca.policies.Scaling.MiCADO:
    derived_from: tosca.policies.Scaling
    description: base MiCADO policy defining data sources, constants, queries, alerts, limits and rules
    properties:
      sources:
        type: list
        description: list of prometheus exporters as data sources
        required: false
      constants:
        type: map
        description: list of constants referred in other sections
        required: false
      alerts:
        type: list
        description: list of prometheus alerts
        required: false
      queries:
        type: map
        description: list of variables and their associated prometheus query
        required: false
      stage:
        type: string
        description: the stage that will be affected by the policy (not yet implemented)
        default: started
        required: false
      priority:
        type: integer
        description: the priority with which the policy will be exectued (not yet implemented)
        default: 100
        required: false
      min_instances:
        type: integer
        required: true
        description: defines the min instances to scale to
      max_instances:
        type: integer
        required: true
        description: defines the max instances to scale to
      scaling_rule:
        type: string
        description: python code to define scaling rule
        required: true
