tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - https://raw.githubusercontent.com/COLAProject/COLARepo/master/nodes/custom_types.yaml
  - https://raw.githubusercontent.com/COLAProject/COLARepo/master/policies/scalability/consumption/tosca_policy_scalability_comsumption.yaml

repositories:
  docker_hub: https://hub.docker.com/

topology_template:
  inputs:
    port_exposed_da:
      type: list
      description: port exposed for data_avenue
      required: yes
      default: ["8080:8080"]
    port_exposed_mysql:
      type: list
      description: port exposed for mysql
      required: yes
      default: ["3306:3306"]
    docker_image_proxy:
      type: string
      description: name of docker image of proxy
      required: yes
      default: haproxy
    docker_image_mysql:
      type: string
      description: name of docker image of mysql
      required: yes
      default: mysql
    docker_image_data_avenue:
      type: string
      description: name of docker image of data_avenue
      required: yes
      default: data_avenue
    host_mem:
      type: scalar-unit.size
      description: host mem capacity
      required: yes
      default: 4 GB
    host_disk:
      type: scalar-unit.size
      description: host disk capacity
      required: yes
      default: 50 GB
    libdrive_id:
      type: string
      description: id of the instance image to launch
      required: yes
      default: "some id"
    host_cpu:
      type: integer
      description: cpu of the host
      required: yes
      default: 2
    mysql_root_password:
      type: string
      description: environment variable to set the root password
      required: yes
      default: DEFAULT_HERE
    mysql_database:
      type: string
      description: environment variable to set the database name
      required: yes
      default: DEFAULT_HERE
    mysql_user:
      type: string
      description: environment variable to set the use name
      required: yes
      default: DEFAULT_HERE
    mysql_password:
      type: string
      description: environment variable to set the password
      required: yes
      default: DEFAULT_HERE
    max_cpu_consumption:
      type: float
      description: max cpu consumption
      required: yes
      default: 0.8

    min_cpu_consumption:
      type: float
      description: min cpu consumption
      required: yes
      default: 0.2

    scale_up_max_time:
      type: scalar-unit.time
      description: max time to scale up
      required: yes
      default: 5 m

    scale_down_max_time:
      type: scalar-unit.time
      description: max time scale down
      required: yes
      default: 5 m

  node_templates:
    proxy:
       type: tosca.nodes.MiCADO.Container.Application.Docker
       artifacts:
         image:
           type: tosca.artifacts.Deployment.Image.Container.Docker
           file: { get_input: docker_image_proxy }
           repository: docker_hub
       requirements:
         - service:
             node: data_avenue
             relationship:
               type: tosca.relationships.MiCADO.ConnectsTo
               properties:
                 network: default_net
         - host:
             node: VM
             relationship: tosca.relationships.HostedOn

    data_avenue:
       type: tosca.nodes.MiCADO.Container.Application.Docker
       properties:
         ports: { get_input: port_exposed_da }
       artifacts:
         image:
           type: tosca.artifacts.Deployment.Image.Container.Docker
           file: { get_input: docker_image_data_avenue }
           repository: docker_hub
       requirements:
         - service:
             node: mysql
             relationship:
               type: tosca.relationships.MiCADO.ConnectsTo
               properties:
                 network: default_net
         - host:
             node: VM
             relationship: tosca.relationships.HostedOn

    mysql:
       type: tosca.nodes.MiCADO.Container.Application.Docker
       properties:
         environment:
           MYSQL_ROOT_PASSWORD: { get_input: mysql_root_password }
           MYSQL_DATABASE: { get_input: mysql_database }
           MYSQL_USER: { get_input: mysql_user }
           MYSQL_PASSWORD: { get_input: mysql_password }
         ports: { get_input: port_exposed_mysql }
       artifacts:
         image:
           type: tosca.artifacts.Deployment.Image.Container.Docker
           file: { get_input: docker_image_mysql }
           repository: docker_hub
       requirements:
         - host:
             node: VM
             relationship: tosca.relationships.HostedOn

    VM:
       type: tosca.nodes.MiCADO.Occopus.CloudSigma.Compute
       properties:
          cloud:
            interface_cloud: cloudsigma
            endpoint_cloud: https://zrh.cloudsigma.com/api/2.0

       capabilities:
          host:
            properties:
              num_cpus: { get_input: host_cpu }
              disk_size: { get_input: host_disk }
              mem_size: { get_input: host_mem }
              libdrive_id: { get_input: libdrive_id }

  outputs:
    ip_address:
      value: { get_attribute: [ data_avenue, ip_address ]}
    port:
      value: { get_attribute: [ data_avenue, port ]}

  policies:
    - consumption:
        type: tosca.policies.Scaling.Performance.Consumption
        targets: [ data_avenue ]
        properties:
          priority: 100
          trigger_1_id: estimate_completion_time
          trigger_1_namespace: prometheus
          max_cpu_consumption: { get_input: max_cpu_consumption }
          scale_up_max_time: { get_input: scale_up_max_time }
          min_cpu_consumption: { get_input: min_cpu_consumption }
          scale_down_max_time: { get_input: scale_down_max_time }
